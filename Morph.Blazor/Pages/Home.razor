@page "/"
@using Morph.GameState
@using Morph.GameStateManagement

<PageTitle>Morph Card Chess</PageTitle>

<style type="text/css">
    body {
        text-align: center;
        margin-left: 0;
        margin-right: 0;
    }

    .spades {
        color: black;
    }

    .hearts {
        color: red;
    }

    .clubs {
        color: green;
    }

    .diamonds {
        color: blue;
    }

    .score {
        font-family: monospace;
        background-color: white;
        color: lightgray;
        font-size: 24px;
    }

        .score span.active {
            color: black;
        }

        .score span.hearts.active {
            color: red;
        }

        .score span.clubs.active {
            color: green;
        }

        .score span.diamonds.active {
            color: blue;
        }

    .hand button {
        min-width: min(160px, 30vw);
        min-height: 32px;
        font-size: 16px;
        vertical-align: middle;
    }

    #board {
        display: inline-grid;
        width: min(100vw, 100vh, 512px);
        height: min(100vw, 100vh, 512px);
        grid-template-rows: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
        grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
    }

        #board img {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }

    [role=status] {
        line-height: 24px;
    }
</style>

@if (manager.State != null)
{
    <div class="score">
        @{
            {
                int hearts = StateModule.GetPointsBySuit(Team.Light, Suit.Heart, manager.State);
                int clubs = StateModule.GetPointsBySuit(Team.Light, Suit.Club, manager.State);
                int diamonds = StateModule.GetPointsBySuit(Team.Light, Suit.Diamond, manager.State);
                int score = StateModule.GetTotalPoints(Team.Light, manager.State);

                <span class="hearts @(hearts > 0 ? "active" : "")">
                    ♥
                    @hearts
                </span>

                <span class="clubs @(clubs > 0 ? "active" : "")">
                    ♣
                    @clubs
                </span>

                <span class="diamonds @(diamonds > 0 ? "active" : "")">
                    ♦
                    @diamonds
                </span>

                <span class="@(score > 0 ? "active" : "")">
                    &nbsp;
                    &nbsp;
                    ☺
                    @score
                </span>
            }
        }
    </div>

    <hr />

    <div class="hand">
        @foreach (var cell in Interactive.GetHandButtons(Team.Light, manager.State))
        {
            <button @onclick=@(() => manager.State = cell.NextState.Value)
                    disabled="@(!cell.Enabled)"
                    class="@cell.ColorClass">
                @cell.Label
            </button>
        }
    </div>

    <div class="hand">
        @foreach (var cell in Interactive.GetPromotionButtons(Team.Light, manager.State))
        {
            <button @onclick=@(() => manager.State = cell.NextState.Value)
                    disabled="@(!cell.Enabled)"
                    class="@cell.ColorClass">
                @cell.Label
            </button>
        }
    </div>

    <hr />

    <div id="board">
        @foreach (var row in Interactive.GetBoardButtons(manager.State))
        {
            foreach (var cell in row)
            {
                <button @onclick=@(() => manager.State = cell.NextState.Value)
                        disabled="@(!cell.Enabled)"
                        class="@cell.ColorClass">
                    @if (cell.ImagePaths.FirstOrDefault() is string path)
                    {
                        <img src="@cell.ImagePaths.FirstOrDefault()" alt="@cell.Label" />
                    }
                    else
                    {
                        @cell.Label
                    }
                </button>
            }
        }
    </div>

    <hr />

    <div class="hand">
        @foreach (var cell in Interactive.GetPromotionButtons(Team.Dark, manager.State))
        {
            <button @onclick=@(() => manager.State = cell.NextState.Value)
                    disabled="@(!cell.Enabled)"
                    class="@cell.ColorClass">
                @cell.Label
            </button>
        }
    </div>

    <div class="hand">
        @foreach (var cell in Interactive.GetHandButtons(Team.Dark, manager.State))
        {
            <button @onclick=@(() => manager.State = cell.NextState.Value)
                    disabled="@(!cell.Enabled)"
                    class="@cell.ColorClass">
                @cell.Label
            </button>
        }
    </div>

    <hr />

    <div class="score">
        @{
            {
                int hearts = StateModule.GetPointsBySuit(Team.Dark, Suit.Heart, manager.State);
                int clubs = StateModule.GetPointsBySuit(Team.Dark, Suit.Club, manager.State);
                int diamonds = StateModule.GetPointsBySuit(Team.Dark, Suit.Diamond, manager.State);
                int score = StateModule.GetTotalPoints(Team.Dark, manager.State);

                <span class="hearts @(hearts > 0 ? "active" : "")">
                    ♥
                    @hearts
                </span>

                <span class="clubs @(clubs > 0 ? "active" : "")">
                    ♣
                    @clubs
                </span>

                <span class="diamonds @(diamonds > 0 ? "active" : "")">
                    ♦
                    @diamonds
                </span>

                <span class="@(score > 0 ? "active" : "")">
                    &nbsp;
                    &nbsp;
                    ☻
                    @score
                </span>
            }
        }
    </div>

    <hr />

    <div class="hand">
        <button @onclick=@(() => manager.State = manager.PreviousState ?? manager.State)
                disabled="@(manager.PreviousState == null)">
            Undo
        </button>
        <button @onclick=@(() => manager.State = manager.NextState ?? manager.State)
                disabled="@(manager.NextState == null)">
            Redo
        </button>
    </div>

    <hr />

    <div role="status">
        @StateModule.Describe(manager.State)
    </div>

    <hr />

    <div>
        New game:
    </div>

    <div class="hand">
        <button @onclick=@(() => manager.State = StateModule.CreateStartingState(DeckType.Euchre))>
            Euchre deck
        </button>
        <button @onclick=@(() => manager.State = StateModule.CreateStartingState(DeckType.Pinochle))>
            Pinochle deck
        </button>
        <button @onclick=@(() => manager.State = StateModule.CreateStartingState(DeckType.Poker))>
            Poker deck
        </button>
    </div>

    <hr />

    <label>
        <input type="checkbox" @bind="@auto" />
        Automatically proceed when only one option is available
    </label>

    @if (auto)
    {
        <p>
            <b>Not implemented</b>
        </p>
    }

    <hr />

    <p>
        Morph Card Chess 2.0
    </p>

    <p>
        © 2024 Isaac Schemm
        <br />
        GNU APGL v3 or later
    </p>
}

@code {
    GameStateManager manager = new GameStateManager();
    bool auto = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        manager.State = StateModule.CreateStartingState(DeckType.Euchre);
    }
}